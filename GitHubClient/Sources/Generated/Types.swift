// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Search repositories
    ///
    /// Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
    ///
    /// `q=tetris+language:assembly&sort=stars&order=desc`
    ///
    /// This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/repositories`.
    /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)`.
    func search_sol_repos(_ input: Operations.search_sol_repos.Input) async throws -> Operations.search_sol_repos.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Search repositories
    ///
    /// Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
    ///
    /// `q=tetris+language:assembly&sort=stars&order=desc`
    ///
    /// This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/repositories`.
    /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)`.
    public func search_sol_repos(
        query: Operations.search_sol_repos.Input.Query,
        headers: Operations.search_sol_repos.Input.Headers = .init()
    ) async throws -> Operations.search_sol_repos.Output {
        try await search_sol_repos(Operations.search_sol_repos.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches`.
        public struct search_hyphen_result_hyphen_text_hyphen_matchesPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/object_url`.
            public var object_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/object_type`.
            public var object_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/property`.
            public var property: Swift.String?
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/fragment`.
            public var fragment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matchesPayload`.
            public struct matchesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matchesPayload/text`.
                public var text: Swift.String?
                /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matchesPayload/indices`.
                public var indices: [Swift.Int]?
                /// Creates a new `matchesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - text:
                ///   - indices:
                public init(
                    text: Swift.String? = nil,
                    indices: [Swift.Int]? = nil
                ) {
                    self.text = text
                    self.indices = indices
                }
                public enum CodingKeys: String, CodingKey {
                    case text
                    case indices
                }
            }
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matches`.
            public typealias matchesPayload = [Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matchesPayload.matchesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matches`.
            public var matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matchesPayload.matchesPayload?
            /// Creates a new `search_hyphen_result_hyphen_text_hyphen_matchesPayload`.
            ///
            /// - Parameters:
            ///   - object_url:
            ///   - object_type:
            ///   - property:
            ///   - fragment:
            ///   - matches:
            public init(
                object_url: Swift.String? = nil,
                object_type: Swift.String? = nil,
                property: Swift.String? = nil,
                fragment: Swift.String? = nil,
                matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matchesPayload.matchesPayload? = nil
            ) {
                self.object_url = object_url
                self.object_type = object_type
                self.property = property
                self.fragment = fragment
                self.matches = matches
            }
            public enum CodingKeys: String, CodingKey {
                case object_url
                case object_type
                case property
                case fragment
                case matches
            }
        }
        /// - Remark: Generated from `#/components/schemas/search-result-text-matches`.
        public typealias search_hyphen_result_hyphen_text_hyphen_matches = [Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matchesPayload]
        /// Repo Search Result Item
        ///
        /// - Remark: Generated from `#/components/schemas/repo-search-result-item`.
        public struct repo_hyphen_search_hyphen_result_hyphen_item: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/pushed_at`.
            public var pushed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/watchers_count`.
            public var watchers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_issues`.
            public var has_issues: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_projects`.
            public var has_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_pages`.
            public var has_pages: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_downloads`.
            public var has_downloads: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/pull`.
                public var pull: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions`.
            public var permissions: Components.Schemas.repo_hyphen_search_hyphen_result_hyphen_item.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/text_matches`.
            public var text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// Creates a new `repo_hyphen_search_hyphen_result_hyphen_item`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - created_at:
            ///   - updated_at:
            ///   - pushed_at:
            ///   - homepage:
            ///   - size:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - language:
            ///   - forks_count:
            ///   - open_issues_count:
            ///   - master_branch:
            ///   - default_branch:
            ///   - score:
            ///   - forks_url:
            ///   - keys_url:
            ///   - collaborators_url:
            ///   - teams_url:
            ///   - hooks_url:
            ///   - issue_events_url:
            ///   - events_url:
            ///   - assignees_url:
            ///   - branches_url:
            ///   - tags_url:
            ///   - blobs_url:
            ///   - git_tags_url:
            ///   - git_refs_url:
            ///   - trees_url:
            ///   - statuses_url:
            ///   - languages_url:
            ///   - stargazers_url:
            ///   - contributors_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - commits_url:
            ///   - git_commits_url:
            ///   - comments_url:
            ///   - issue_comment_url:
            ///   - contents_url:
            ///   - compare_url:
            ///   - merges_url:
            ///   - archive_url:
            ///   - downloads_url:
            ///   - issues_url:
            ///   - pulls_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - labels_url:
            ///   - releases_url:
            ///   - deployments_url:
            ///   - git_url:
            ///   - ssh_url:
            ///   - clone_url:
            ///   - svn_url:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - topics:
            ///   - mirror_url:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_pages:
            ///   - has_wiki:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - license:
            ///   - permissions:
            ///   - text_matches:
            ///   - temp_clone_token:
            ///   - allow_merge_commit:
            ///   - allow_squash_merge:
            ///   - allow_rebase_merge:
            ///   - allow_auto_merge:
            ///   - delete_branch_on_merge:
            ///   - allow_forking:
            ///   - is_template:
            ///   - web_commit_signoff_required:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                pushed_at: Foundation.Date,
                homepage: Swift.String? = nil,
                size: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                open_issues_count: Swift.Int,
                master_branch: Swift.String? = nil,
                default_branch: Swift.String,
                score: Swift.Double,
                forks_url: Swift.String,
                keys_url: Swift.String,
                collaborators_url: Swift.String,
                teams_url: Swift.String,
                hooks_url: Swift.String,
                issue_events_url: Swift.String,
                events_url: Swift.String,
                assignees_url: Swift.String,
                branches_url: Swift.String,
                tags_url: Swift.String,
                blobs_url: Swift.String,
                git_tags_url: Swift.String,
                git_refs_url: Swift.String,
                trees_url: Swift.String,
                statuses_url: Swift.String,
                languages_url: Swift.String,
                stargazers_url: Swift.String,
                contributors_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                commits_url: Swift.String,
                git_commits_url: Swift.String,
                comments_url: Swift.String,
                issue_comment_url: Swift.String,
                contents_url: Swift.String,
                compare_url: Swift.String,
                merges_url: Swift.String,
                archive_url: Swift.String,
                downloads_url: Swift.String,
                issues_url: Swift.String,
                pulls_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                labels_url: Swift.String,
                releases_url: Swift.String,
                deployments_url: Swift.String,
                git_url: Swift.String,
                ssh_url: Swift.String,
                clone_url: Swift.String,
                svn_url: Swift.String,
                forks: Swift.Int,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                topics: [Swift.String]? = nil,
                mirror_url: Swift.String? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_pages: Swift.Bool,
                has_wiki: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                permissions: Components.Schemas.repo_hyphen_search_hyphen_result_hyphen_item.permissionsPayload? = nil,
                text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                is_template: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.created_at = created_at
                self.updated_at = updated_at
                self.pushed_at = pushed_at
                self.homepage = homepage
                self.size = size
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.language = language
                self.forks_count = forks_count
                self.open_issues_count = open_issues_count
                self.master_branch = master_branch
                self.default_branch = default_branch
                self.score = score
                self.forks_url = forks_url
                self.keys_url = keys_url
                self.collaborators_url = collaborators_url
                self.teams_url = teams_url
                self.hooks_url = hooks_url
                self.issue_events_url = issue_events_url
                self.events_url = events_url
                self.assignees_url = assignees_url
                self.branches_url = branches_url
                self.tags_url = tags_url
                self.blobs_url = blobs_url
                self.git_tags_url = git_tags_url
                self.git_refs_url = git_refs_url
                self.trees_url = trees_url
                self.statuses_url = statuses_url
                self.languages_url = languages_url
                self.stargazers_url = stargazers_url
                self.contributors_url = contributors_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.commits_url = commits_url
                self.git_commits_url = git_commits_url
                self.comments_url = comments_url
                self.issue_comment_url = issue_comment_url
                self.contents_url = contents_url
                self.compare_url = compare_url
                self.merges_url = merges_url
                self.archive_url = archive_url
                self.downloads_url = downloads_url
                self.issues_url = issues_url
                self.pulls_url = pulls_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.labels_url = labels_url
                self.releases_url = releases_url
                self.deployments_url = deployments_url
                self.git_url = git_url
                self.ssh_url = ssh_url
                self.clone_url = clone_url
                self.svn_url = svn_url
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.topics = topics
                self.mirror_url = mirror_url
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_pages = has_pages
                self.has_wiki = has_wiki
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.license = license
                self.permissions = permissions
                self.text_matches = text_matches
                self.temp_clone_token = temp_clone_token
                self.allow_merge_commit = allow_merge_commit
                self.allow_squash_merge = allow_squash_merge
                self.allow_rebase_merge = allow_rebase_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_forking = allow_forking
                self.is_template = is_template
                self.web_commit_signoff_required = web_commit_signoff_required
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case created_at
                case updated_at
                case pushed_at
                case homepage
                case size
                case stargazers_count
                case watchers_count
                case language
                case forks_count
                case open_issues_count
                case master_branch
                case default_branch
                case score
                case forks_url
                case keys_url
                case collaborators_url
                case teams_url
                case hooks_url
                case issue_events_url
                case events_url
                case assignees_url
                case branches_url
                case tags_url
                case blobs_url
                case git_tags_url
                case git_refs_url
                case trees_url
                case statuses_url
                case languages_url
                case stargazers_url
                case contributors_url
                case subscribers_url
                case subscription_url
                case commits_url
                case git_commits_url
                case comments_url
                case issue_comment_url
                case contents_url
                case compare_url
                case merges_url
                case archive_url
                case downloads_url
                case issues_url
                case pulls_url
                case milestones_url
                case notifications_url
                case labels_url
                case releases_url
                case deployments_url
                case git_url
                case ssh_url
                case clone_url
                case svn_url
                case forks
                case open_issues
                case watchers
                case topics
                case mirror_url
                case has_issues
                case has_projects
                case has_pages
                case has_wiki
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case license
                case permissions
                case text_matches
                case temp_clone_token
                case allow_merge_commit
                case allow_squash_merge
                case allow_rebase_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_forking
                case is_template
                case web_commit_signoff_required
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        ///
        /// - Remark: Generated from `#/components/parameters/order`.
        @frozen public enum order: String, Codable, Hashable, Sendable, CaseIterable {
            case desc = "desc"
            case asc = "asc"
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Search repositories
    ///
    /// Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
    ///
    /// `q=tetris+language:assembly&sort=stars&order=desc`
    ///
    /// This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/repositories`.
    /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)`.
    public enum search_sol_repos {
        public static let id: Swift.String = "search/repos"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/q`.
                public var q: Swift.String
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case stars = "stars"
                    case forks = "forks"
                    case help_hyphen_wanted_hyphen_issues = "help-wanted-issues"
                    case updated = "updated"
                }
                /// Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/sort`.
                public var sort: Operations.search_sol_repos.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/order`.
                @frozen public enum order: String, Codable, Hashable, Sendable, CaseIterable {
                    case desc = "desc"
                    case asc = "asc"
                }
                /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/order`.
                public var order: Components.Parameters.order?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - q: The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
                ///   - sort: Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///   - order: Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    q: Swift.String,
                    sort: Operations.search_sol_repos.Input.Query.sortPayload? = nil,
                    order: Components.Parameters.order? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.q = q
                    self.sort = sort
                    self.order = order
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.search_sol_repos.Input.Query
            /// - Remark: Generated from `#/paths/search/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_repos.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_repos.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.search_sol_repos.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.search_sol_repos.Input.Query,
                headers: Operations.search_sol_repos.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/json/incomplete_results`.
                        public var incomplete_results: Swift.Bool
                        /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.repo_hyphen_search_hyphen_result_hyphen_item]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - incomplete_results:
                        ///   - items:
                        public init(
                            total_count: Swift.Int,
                            incomplete_results: Swift.Bool,
                            items: [Components.Schemas.repo_hyphen_search_hyphen_result_hyphen_item]
                        ) {
                            self.total_count = total_count
                            self.incomplete_results = incomplete_results
                            self.items = items
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case incomplete_results
                            case items
                        }
                    }
                    /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.search_sol_repos.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.search_sol_repos.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.search_sol_repos.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.search_sol_repos.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.search_sol_repos.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.search_sol_repos.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            public static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
